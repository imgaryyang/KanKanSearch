/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kankanews.fmi.thrift.interfaze;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked" })
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-29")
public class IFMISearchService {

	public interface Iface {

		public String sayHello(String username)
				throws org.apache.thrift.TException;

		public String searchHints(String keyword)
				throws org.apache.thrift.TException;

		public String search(String keyword, int page, int num)
				throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void sayHello(String username,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void searchHints(String keyword,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

		public void search(String keyword, int page, int num,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient
			implements Iface {
		public static class Factory implements
				org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public String sayHello(String username)
				throws org.apache.thrift.TException {
			send_sayHello(username);
			return recv_sayHello();
		}

		public void send_sayHello(String username)
				throws org.apache.thrift.TException {
			sayHello_args args = new sayHello_args();
			args.setUsername(username);
			sendBase("sayHello", args);
		}

		public String recv_sayHello() throws org.apache.thrift.TException {
			sayHello_result result = new sayHello_result();
			receiveBase(result, "sayHello");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"sayHello failed: unknown result");
		}

		public String searchHints(String keyword)
				throws org.apache.thrift.TException {
			send_searchHints(keyword);
			return recv_searchHints();
		}

		public void send_searchHints(String keyword)
				throws org.apache.thrift.TException {
			searchHints_args args = new searchHints_args();
			args.setKeyword(keyword);
			sendBase("searchHints", args);
		}

		public String recv_searchHints() throws org.apache.thrift.TException {
			searchHints_result result = new searchHints_result();
			receiveBase(result, "searchHints");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"searchHints failed: unknown result");
		}

		public String search(String keyword, int page, int num)
				throws org.apache.thrift.TException {
			send_search(keyword, page, num);
			return recv_search();
		}

		public void send_search(String keyword, int page, int num)
				throws org.apache.thrift.TException {
			search_args args = new search_args();
			args.setKeyword(keyword);
			args.setPage(page);
			args.setNum(num);
			sendBase("search", args);
		}

		public String recv_search() throws org.apache.thrift.TException {
			search_result result = new search_result();
			receiveBase(result, "search");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"search failed: unknown result");
		}

	}

	public static class AsyncClient extends
			org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements
				org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(
					org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager,
						transport);
			}
		}

		public AsyncClient(
				org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void sayHello(String username,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			sayHello_call method_call = new sayHello_call(username,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class sayHello_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String username;

			public sayHello_call(
					String username,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.username = username;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"sayHello",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				sayHello_args args = new sayHello_args();
				args.setUsername(username);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_sayHello();
			}
		}

		public void searchHints(String keyword,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			searchHints_call method_call = new searchHints_call(keyword,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class searchHints_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String keyword;

			public searchHints_call(
					String keyword,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.keyword = keyword;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"searchHints",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				searchHints_args args = new searchHints_args();
				args.setKeyword(keyword);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_searchHints();
			}
		}

		public void search(String keyword, int page, int num,
				org.apache.thrift.async.AsyncMethodCallback resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			search_call method_call = new search_call(keyword, page, num,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class search_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private String keyword;
			private int page;
			private int num;

			public search_call(
					String keyword,
					int page,
					int num,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.keyword = keyword;
				this.page = page;
				this.num = num;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"search", org.apache.thrift.protocol.TMessageType.CALL,
						0));
				search_args args = new search_args();
				args.setKeyword(keyword);
				args.setPage(page);
				args.setNum(num);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public String getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client
						.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_search();
			}
		}

	}

	public static class Processor<I extends Iface> extends
			org.apache.thrift.TBaseProcessor<I> implements
			org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory
				.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(
				I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("sayHello", new sayHello());
			processMap.put("searchHints", new searchHints());
			processMap.put("search", new search());
			return processMap;
		}

		public static class sayHello<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, sayHello_args> {
			public sayHello() {
				super("sayHello");
			}

			public sayHello_args getEmptyArgsInstance() {
				return new sayHello_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public sayHello_result getResult(I iface, sayHello_args args)
					throws org.apache.thrift.TException {
				sayHello_result result = new sayHello_result();
				result.success = iface.sayHello(args.username);
				return result;
			}
		}

		public static class searchHints<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, searchHints_args> {
			public searchHints() {
				super("searchHints");
			}

			public searchHints_args getEmptyArgsInstance() {
				return new searchHints_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public searchHints_result getResult(I iface, searchHints_args args)
					throws org.apache.thrift.TException {
				searchHints_result result = new searchHints_result();
				result.success = iface.searchHints(args.keyword);
				return result;
			}
		}

		public static class search<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, search_args> {
			public search() {
				super("search");
			}

			public search_args getEmptyArgsInstance() {
				return new search_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public search_result getResult(I iface, search_args args)
					throws org.apache.thrift.TException {
				search_result result = new search_result();
				result.success = iface
						.search(args.keyword, args.page, args.num);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends
			org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(
				I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("sayHello", new sayHello());
			processMap.put("searchHints", new searchHints());
			processMap.put("search", new search());
			return processMap;
		}

		public static class sayHello<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, sayHello_args, String> {
			public sayHello() {
				super("sayHello");
			}

			public sayHello_args getEmptyArgsInstance() {
				return new sayHello_args();
			}

			public AsyncMethodCallback<String> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						sayHello_result result = new sayHello_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						sayHello_result result = new sayHello_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					sayHello_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler)
					throws TException {
				iface.sayHello(args.username, resultHandler);
			}
		}

		public static class searchHints<I extends AsyncIface>
				extends
				org.apache.thrift.AsyncProcessFunction<I, searchHints_args, String> {
			public searchHints() {
				super("searchHints");
			}

			public searchHints_args getEmptyArgsInstance() {
				return new searchHints_args();
			}

			public AsyncMethodCallback<String> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						searchHints_result result = new searchHints_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						searchHints_result result = new searchHints_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					searchHints_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler)
					throws TException {
				iface.searchHints(args.keyword, resultHandler);
			}
		}

		public static class search<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, search_args, String> {
			public search() {
				super("search");
			}

			public search_args getEmptyArgsInstance() {
				return new search_args();
			}

			public AsyncMethodCallback<String> getResultHandler(
					final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<String>() {
					public void onComplete(String o) {
						search_result result = new search_result();
						result.success = o;
						try {
							fcall.sendResponse(
									fb,
									result,
									org.apache.thrift.protocol.TMessageType.REPLY,
									seqid);
							return;
						} catch (Exception e) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						search_result result = new search_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR,
									e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error(
									"Exception writing to internal frame buffer",
									ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(
					I iface,
					search_args args,
					org.apache.thrift.async.AsyncMethodCallback<String> resultHandler)
					throws TException {
				iface.search(args.keyword, args.page, args.num, resultHandler);
			}
		}

	}

	public static class sayHello_args implements
			org.apache.thrift.TBase<sayHello_args, sayHello_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<sayHello_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"sayHello_args");

		private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"username", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new sayHello_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new sayHello_argsTupleSchemeFactory());
		}

		public String username; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			USERNAME((short) 1, "username");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // USERNAME
					return USERNAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.USERNAME,
					new org.apache.thrift.meta_data.FieldMetaData("username",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					sayHello_args.class, metaDataMap);
		}

		public sayHello_args() {
		}

		public sayHello_args(String username) {
			this();
			this.username = username;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sayHello_args(sayHello_args other) {
			if (other.isSetUsername()) {
				this.username = other.username;
			}
		}

		public sayHello_args deepCopy() {
			return new sayHello_args(this);
		}

		public void clear() {
			this.username = null;
		}

		public String getUsername() {
			return this.username;
		}

		public sayHello_args setUsername(String username) {
			this.username = username;
			return this;
		}

		public void unsetUsername() {
			this.username = null;
		}

		/**
		 * Returns true if field username is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetUsername() {
			return this.username != null;
		}

		public void setUsernameIsSet(boolean value) {
			if (!value) {
				this.username = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case USERNAME:
				if (value == null) {
					unsetUsername();
				} else {
					setUsername((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case USERNAME:
				return getUsername();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case USERNAME:
				return isSetUsername();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sayHello_args)
				return this.equals((sayHello_args) that);
			return false;
		}

		public boolean equals(sayHello_args that) {
			if (that == null)
				return false;

			boolean this_present_username = true && this.isSetUsername();
			boolean that_present_username = true && that.isSetUsername();
			if (this_present_username || that_present_username) {
				if (!(this_present_username && that_present_username))
					return false;
				if (!this.username.equals(that.username))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_username = true && (isSetUsername());
			list.add(present_username);
			if (present_username)
				list.add(username);

			return list.hashCode();
		}

		public int compareTo(sayHello_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetUsername()).compareTo(
					other.isSetUsername());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUsername()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.username, other.username);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("sayHello_args(");
			boolean first = true;

			sb.append("username:");
			if (this.username == null) {
				sb.append("null");
			} else {
				sb.append(this.username);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class sayHello_argsStandardSchemeFactory implements
				SchemeFactory {
			public sayHello_argsStandardScheme getScheme() {
				return new sayHello_argsStandardScheme();
			}
		}

		private static class sayHello_argsStandardScheme extends
				StandardScheme<sayHello_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					sayHello_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // USERNAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.username = iprot.readString();
							struct.setUsernameIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					sayHello_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.username != null) {
					oprot.writeFieldBegin(USERNAME_FIELD_DESC);
					oprot.writeString(struct.username);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sayHello_argsTupleSchemeFactory implements
				SchemeFactory {
			public sayHello_argsTupleScheme getScheme() {
				return new sayHello_argsTupleScheme();
			}
		}

		private static class sayHello_argsTupleScheme extends
				TupleScheme<sayHello_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					sayHello_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetUsername()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUsername()) {
					oprot.writeString(struct.username);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					sayHello_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.username = iprot.readString();
					struct.setUsernameIsSet(true);
				}
			}
		}

	}

	public static class sayHello_result implements
			org.apache.thrift.TBase<sayHello_result, sayHello_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<sayHello_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"sayHello_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new sayHello_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new sayHello_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					sayHello_result.class, metaDataMap);
		}

		public sayHello_result() {
		}

		public sayHello_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public sayHello_result(sayHello_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public sayHello_result deepCopy() {
			return new sayHello_result(this);
		}

		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public sayHello_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof sayHello_result)
				return this.equals((sayHello_result) that);
			return false;
		}

		public boolean equals(sayHello_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		public int compareTo(sayHello_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("sayHello_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class sayHello_resultStandardSchemeFactory implements
				SchemeFactory {
			public sayHello_resultStandardScheme getScheme() {
				return new sayHello_resultStandardScheme();
			}
		}

		private static class sayHello_resultStandardScheme extends
				StandardScheme<sayHello_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					sayHello_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					sayHello_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class sayHello_resultTupleSchemeFactory implements
				SchemeFactory {
			public sayHello_resultTupleScheme getScheme() {
				return new sayHello_resultTupleScheme();
			}
		}

		private static class sayHello_resultTupleScheme extends
				TupleScheme<sayHello_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					sayHello_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					sayHello_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class searchHints_args
			implements
			org.apache.thrift.TBase<searchHints_args, searchHints_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<searchHints_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"searchHints_args");

		private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"keyword", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new searchHints_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new searchHints_argsTupleSchemeFactory());
		}

		public String keyword; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			KEYWORD((short) 1, "keyword");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // KEYWORD
					return KEYWORD;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.KEYWORD,
					new org.apache.thrift.meta_data.FieldMetaData("keyword",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					searchHints_args.class, metaDataMap);
		}

		public searchHints_args() {
		}

		public searchHints_args(String keyword) {
			this();
			this.keyword = keyword;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public searchHints_args(searchHints_args other) {
			if (other.isSetKeyword()) {
				this.keyword = other.keyword;
			}
		}

		public searchHints_args deepCopy() {
			return new searchHints_args(this);
		}

		public void clear() {
			this.keyword = null;
		}

		public String getKeyword() {
			return this.keyword;
		}

		public searchHints_args setKeyword(String keyword) {
			this.keyword = keyword;
			return this;
		}

		public void unsetKeyword() {
			this.keyword = null;
		}

		/**
		 * Returns true if field keyword is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetKeyword() {
			return this.keyword != null;
		}

		public void setKeywordIsSet(boolean value) {
			if (!value) {
				this.keyword = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case KEYWORD:
				if (value == null) {
					unsetKeyword();
				} else {
					setKeyword((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case KEYWORD:
				return getKeyword();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case KEYWORD:
				return isSetKeyword();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof searchHints_args)
				return this.equals((searchHints_args) that);
			return false;
		}

		public boolean equals(searchHints_args that) {
			if (that == null)
				return false;

			boolean this_present_keyword = true && this.isSetKeyword();
			boolean that_present_keyword = true && that.isSetKeyword();
			if (this_present_keyword || that_present_keyword) {
				if (!(this_present_keyword && that_present_keyword))
					return false;
				if (!this.keyword.equals(that.keyword))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_keyword = true && (isSetKeyword());
			list.add(present_keyword);
			if (present_keyword)
				list.add(keyword);

			return list.hashCode();
		}

		public int compareTo(searchHints_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(
					other.isSetKeyword());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetKeyword()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.keyword, other.keyword);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("searchHints_args(");
			boolean first = true;

			sb.append("keyword:");
			if (this.keyword == null) {
				sb.append("null");
			} else {
				sb.append(this.keyword);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class searchHints_argsStandardSchemeFactory implements
				SchemeFactory {
			public searchHints_argsStandardScheme getScheme() {
				return new searchHints_argsStandardScheme();
			}
		}

		private static class searchHints_argsStandardScheme extends
				StandardScheme<searchHints_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					searchHints_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // KEYWORD
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.keyword = iprot.readString();
							struct.setKeywordIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					searchHints_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.keyword != null) {
					oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
					oprot.writeString(struct.keyword);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class searchHints_argsTupleSchemeFactory implements
				SchemeFactory {
			public searchHints_argsTupleScheme getScheme() {
				return new searchHints_argsTupleScheme();
			}
		}

		private static class searchHints_argsTupleScheme extends
				TupleScheme<searchHints_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					searchHints_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetKeyword()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetKeyword()) {
					oprot.writeString(struct.keyword);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					searchHints_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.keyword = iprot.readString();
					struct.setKeywordIsSet(true);
				}
			}
		}

	}

	public static class searchHints_result
			implements
			org.apache.thrift.TBase<searchHints_result, searchHints_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<searchHints_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"searchHints_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new searchHints_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new searchHints_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					searchHints_result.class, metaDataMap);
		}

		public searchHints_result() {
		}

		public searchHints_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public searchHints_result(searchHints_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public searchHints_result deepCopy() {
			return new searchHints_result(this);
		}

		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public searchHints_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof searchHints_result)
				return this.equals((searchHints_result) that);
			return false;
		}

		public boolean equals(searchHints_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		public int compareTo(searchHints_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("searchHints_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class searchHints_resultStandardSchemeFactory implements
				SchemeFactory {
			public searchHints_resultStandardScheme getScheme() {
				return new searchHints_resultStandardScheme();
			}
		}

		private static class searchHints_resultStandardScheme extends
				StandardScheme<searchHints_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					searchHints_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					searchHints_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class searchHints_resultTupleSchemeFactory implements
				SchemeFactory {
			public searchHints_resultTupleScheme getScheme() {
				return new searchHints_resultTupleScheme();
			}
		}

		private static class searchHints_resultTupleScheme extends
				TupleScheme<searchHints_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					searchHints_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					searchHints_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class search_args implements
			org.apache.thrift.TBase<search_args, search_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<search_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"search_args");

		private static final org.apache.thrift.protocol.TField KEYWORD_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"keyword", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"page", org.apache.thrift.protocol.TType.I32, (short) 2);
		private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"num", org.apache.thrift.protocol.TType.I32, (short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new search_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new search_argsTupleSchemeFactory());
		}

		public String keyword; // required
		public int page; // required
		public int num; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			KEYWORD((short) 1, "keyword"), PAGE((short) 2, "page"), NUM(
					(short) 3, "num");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // KEYWORD
					return KEYWORD;
				case 2: // PAGE
					return PAGE;
				case 3: // NUM
					return NUM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __PAGE_ISSET_ID = 0;
		private static final int __NUM_ISSET_ID = 1;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.KEYWORD,
					new org.apache.thrift.meta_data.FieldMetaData("keyword",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PAGE,
					new org.apache.thrift.meta_data.FieldMetaData("page",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.NUM,
					new org.apache.thrift.meta_data.FieldMetaData("num",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.I32)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					search_args.class, metaDataMap);
		}

		public search_args() {
		}

		public search_args(String keyword, int page, int num) {
			this();
			this.keyword = keyword;
			this.page = page;
			setPageIsSet(true);
			this.num = num;
			setNumIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public search_args(search_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetKeyword()) {
				this.keyword = other.keyword;
			}
			this.page = other.page;
			this.num = other.num;
		}

		public search_args deepCopy() {
			return new search_args(this);
		}

		public void clear() {
			this.keyword = null;
			setPageIsSet(false);
			this.page = 0;
			setNumIsSet(false);
			this.num = 0;
		}

		public String getKeyword() {
			return this.keyword;
		}

		public search_args setKeyword(String keyword) {
			this.keyword = keyword;
			return this;
		}

		public void unsetKeyword() {
			this.keyword = null;
		}

		/**
		 * Returns true if field keyword is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetKeyword() {
			return this.keyword != null;
		}

		public void setKeywordIsSet(boolean value) {
			if (!value) {
				this.keyword = null;
			}
		}

		public int getPage() {
			return this.page;
		}

		public search_args setPage(int page) {
			this.page = page;
			setPageIsSet(true);
			return this;
		}

		public void unsetPage() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__PAGE_ISSET_ID);
		}

		/**
		 * Returns true if field page is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetPage() {
			return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
		}

		public void setPageIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__PAGE_ISSET_ID, value);
		}

		public int getNum() {
			return this.num;
		}

		public search_args setNum(int num) {
			this.num = num;
			setNumIsSet(true);
			return this;
		}

		public void unsetNum() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield,
					__NUM_ISSET_ID);
		}

		/**
		 * Returns true if field num is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetNum() {
			return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
		}

		public void setNumIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield,
					__NUM_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case KEYWORD:
				if (value == null) {
					unsetKeyword();
				} else {
					setKeyword((String) value);
				}
				break;

			case PAGE:
				if (value == null) {
					unsetPage();
				} else {
					setPage((Integer) value);
				}
				break;

			case NUM:
				if (value == null) {
					unsetNum();
				} else {
					setNum((Integer) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case KEYWORD:
				return getKeyword();

			case PAGE:
				return getPage();

			case NUM:
				return getNum();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case KEYWORD:
				return isSetKeyword();
			case PAGE:
				return isSetPage();
			case NUM:
				return isSetNum();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof search_args)
				return this.equals((search_args) that);
			return false;
		}

		public boolean equals(search_args that) {
			if (that == null)
				return false;

			boolean this_present_keyword = true && this.isSetKeyword();
			boolean that_present_keyword = true && that.isSetKeyword();
			if (this_present_keyword || that_present_keyword) {
				if (!(this_present_keyword && that_present_keyword))
					return false;
				if (!this.keyword.equals(that.keyword))
					return false;
			}

			boolean this_present_page = true;
			boolean that_present_page = true;
			if (this_present_page || that_present_page) {
				if (!(this_present_page && that_present_page))
					return false;
				if (this.page != that.page)
					return false;
			}

			boolean this_present_num = true;
			boolean that_present_num = true;
			if (this_present_num || that_present_num) {
				if (!(this_present_num && that_present_num))
					return false;
				if (this.num != that.num)
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_keyword = true && (isSetKeyword());
			list.add(present_keyword);
			if (present_keyword)
				list.add(keyword);

			boolean present_page = true;
			list.add(present_page);
			if (present_page)
				list.add(page);

			boolean present_num = true;
			list.add(present_num);
			if (present_num)
				list.add(num);

			return list.hashCode();
		}

		public int compareTo(search_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetKeyword()).compareTo(
					other.isSetKeyword());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetKeyword()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.keyword, other.keyword);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetPage()).compareTo(
					other.isSetPage());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPage()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.page, other.page);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetNum()).compareTo(
					other.isSetNum());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetNum()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.num, other.num);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("search_args(");
			boolean first = true;

			sb.append("keyword:");
			if (this.keyword == null) {
				sb.append("null");
			} else {
				sb.append(this.keyword);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("page:");
			sb.append(this.page);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("num:");
			sb.append(this.num);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class search_argsStandardSchemeFactory implements
				SchemeFactory {
			public search_argsStandardScheme getScheme() {
				return new search_argsStandardScheme();
			}
		}

		private static class search_argsStandardScheme extends
				StandardScheme<search_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					search_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // KEYWORD
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.keyword = iprot.readString();
							struct.setKeywordIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 2: // PAGE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.page = iprot.readI32();
							struct.setPageIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					case 3: // NUM
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.num = iprot.readI32();
							struct.setNumIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					search_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.keyword != null) {
					oprot.writeFieldBegin(KEYWORD_FIELD_DESC);
					oprot.writeString(struct.keyword);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(PAGE_FIELD_DESC);
				oprot.writeI32(struct.page);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(NUM_FIELD_DESC);
				oprot.writeI32(struct.num);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class search_argsTupleSchemeFactory implements
				SchemeFactory {
			public search_argsTupleScheme getScheme() {
				return new search_argsTupleScheme();
			}
		}

		private static class search_argsTupleScheme extends
				TupleScheme<search_args> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					search_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetKeyword()) {
					optionals.set(0);
				}
				if (struct.isSetPage()) {
					optionals.set(1);
				}
				if (struct.isSetNum()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetKeyword()) {
					oprot.writeString(struct.keyword);
				}
				if (struct.isSetPage()) {
					oprot.writeI32(struct.page);
				}
				if (struct.isSetNum()) {
					oprot.writeI32(struct.num);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					search_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.keyword = iprot.readString();
					struct.setKeywordIsSet(true);
				}
				if (incoming.get(1)) {
					struct.page = iprot.readI32();
					struct.setPageIsSet(true);
				}
				if (incoming.get(2)) {
					struct.num = iprot.readI32();
					struct.setNumIsSet(true);
				}
			}
		}

	}

	public static class search_result implements
			org.apache.thrift.TBase<search_result, search_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<search_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"search_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRING, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new search_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class,
					new search_resultTupleSchemeFactory());
		}

		public String success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId
							+ " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					search_result.class, metaDataMap);
		}

		public search_result() {
		}

		public search_result(String success) {
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public search_result(search_result other) {
			if (other.isSetSuccess()) {
				this.success = other.success;
			}
		}

		public search_result deepCopy() {
			return new search_result(this);
		}

		public void clear() {
			this.success = null;
		}

		public String getSuccess() {
			return this.success;
		}

		public search_result setSuccess(String success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((String) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof search_result)
				return this.equals((search_result) that);
			return false;
		}

		public boolean equals(search_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		public int hashCode() {
			List<Object> list = new ArrayList<Object>();

			boolean present_success = true && (isSetSuccess());
			list.add(present_success);
			if (present_success)
				list.add(success);

			return list.hashCode();
		}

		public int compareTo(search_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(
						other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(
					other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(
						this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("search_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out)
				throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class search_resultStandardSchemeFactory implements
				SchemeFactory {
			public search_resultStandardScheme getScheme() {
				return new search_resultStandardScheme();
			}
		}

		private static class search_resultStandardScheme extends
				StandardScheme<search_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					search_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.success = iprot.readString();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(
									iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
								schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					search_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeString(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class search_resultTupleSchemeFactory implements
				SchemeFactory {
			public search_resultTupleScheme getScheme() {
				return new search_resultTupleScheme();
			}
		}

		private static class search_resultTupleScheme extends
				TupleScheme<search_result> {

			public void write(org.apache.thrift.protocol.TProtocol prot,
					search_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeString(struct.success);
				}
			}

			public void read(org.apache.thrift.protocol.TProtocol prot,
					search_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readString();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
